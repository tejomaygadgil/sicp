(load "0.util.scm")
(load "0.efma.scm")
(define (bst-set)
  (let ((inner-tree '()))
    (define (entry tree) (car tree))
    (define (left-branch tree) (cadr tree))
    (define (right-branch tree) (caddr tree))
    (define (make-tree entry left right)
      (list entry left right))
    (define (element-of-set? x)
      (define (loop tree)
        (cond ((null? tree) false)
              ((= x (entry tree)) true)
              ((< x (entry tree))
               (loop (left-branch tree)))
              ((> x (entry tree))
               (loop (right-branch tree)))))
      (loop inner-tree))
    (define (adjoin-set x)
      (define (loop tree)
        (cond ((null? tree)
               (make-tree x '() '()))
              ((= x (entry tree)) inner-tree)
              ((< x (entry tree))
               (make-tree (entry tree)
                          (loop (left-branch tree))
                          (right-branch tree)))
              ((> x (entry tree))
               (make-tree (entry tree)
                          (left-branch tree)
                          (loop (left-branch tree))))))
      (set! inner-tree (loop inner-tree))
      'done)
    (define (dispatch m)
      (cond ((eq? m 'element-of-set?) element-of-set?)
            ((eq? m 'adjoin-set) adjoin-set)
            ((eq? m 'get-tree) inner-tree)
            (else (error "Unknown operation -- BST-SET" m))))
    dispatch))
;; Interface
(define (element-of-set? x set)
  ((set 'element-of-set?) x))
(define (adjoin-set x set)
  ((set 'adjoin-set) x))
(define (get-tree set)
  (set 'get-tree))
(define (print-set set)
  (print (enumerate-tree (get-tree set))))
