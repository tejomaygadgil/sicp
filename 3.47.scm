;;;; 3.47
;; A semaphore (of size $n$) is a generalization of a mutex. Like a mutex, a semaphore supports acquire and release operations, but it is more general in that up to n processes can acquire it concurrently. Additional processes that attempt to acquire the semaphore must wait for release operations. Give implementations of semaphores
;;
;; a. in terms of mutexes
;;
;; b. in terms of atomic test-and-set! operations.

;; Test
(load "0.util.scm")
(load "3.parallel-execute.scm")
(define (make-bulb)
  (let ((on? 0))
    (lambda (m)
      (cond ((eq? m 'on) (set! on? 1))
            ((eq? m 'off) (set! on? 0))
            ((eq? m 'on?) on?)
            (else (error "Unknown operation -- BULB" m))))))
(define (on? bulb) (bulb 'on?))
(define (on bulb) (bulb 'on))
(define (off bulb) (bulb 'off))
(define (make-bulbs n)
  (define (loop i l)
    (if (= i n) l
      (loop (1+ i) (cons (make-bulb) l))))
  (loop 1 (cons (make-bulb) '())))
(define (check-bulbs bulbs)
  (define (loop active bulbs)
    (let* ((active? (on? (car bulbs)))
           (rest (cdr bulbs))
           (active (if (eq? active? 1) (1+ active) active)))
      (display active?)
      (if (null? (cdr bulbs))
        (begin (display " ") (display active))
        (loop active (cdr bulbs)))))
  (loop 0 bulbs)
  (newline))
(define (check-periodic time bulbs)
  (let (loop) ()
    (wait time)
    (check-bulbs bulbs)
    (loop)))
(define (flicker time bulb sp)
  (let loop ()
    (wait 0.5)
    (sp 'acquire)
    (on bulb)
    (wait time)
    (off bulb)
    (sp 'release)
    (loop)))
(define (run-test pkg)
  (load pkg)
  (define sp (make-semaphore 4))
  (define bulbs (make-bulbs 10))
  (print pkg)
  (parallel-execute
    (lambda () (check-periodic 1 bulbs))
    (lambda () (flicker 2.0 (list-ref bulbs 0) sp))
    (lambda () (flicker 4.0 (list-ref bulbs 1) sp))
    (lambda () (flicker 6.0 (list-ref bulbs 2) sp))
    (lambda () (flicker 8.0 (list-ref bulbs 3) sp))
    (lambda () (flicker 10.0 (list-ref bulbs 4) sp))
    (lambda () (flicker 9.0 (list-ref bulbs 5) sp))
    (lambda () (flicker 7.0 (list-ref bulbs 6) sp))
    (lambda () (flicker 5.0 (list-ref bulbs 7) sp))
    (lambda () (flicker 3.0 (list-ref bulbs 8) sp))
    (lambda () (flicker 1.0 (list-ref bulbs 9) sp)))
  (wait 20))
(run-test "3.47.a.scm")
(run-test "3.47.b.scm")
