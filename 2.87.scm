;;;; 2.87
;; Install `=zero?` for polynomials in the generic arithmetic package. This will allow `adjoin-term` to work for polynomials with coefficients that are themselves polynomials.

;; Test
(load "0.util.scm")
(load "0.table.scm")
(load "2.85.symbolic-tagged-data.scm")
(load "2.85.apply-generic.scm")
(load "2.symbolic-interface.scm")
(define *op-table* (make-hash-table))
(load "2.symbolic-scheme-number.scm")
(load "2.symbolic-rational.scm")
(load "2.symbolic-real-number.scm")
(load "2.symbolic-complex.scm")
(load "2.symbolic-polynomial-sparse.scm")
(install-symbolic-scheme-number-package)
(install-symbolic-rational-package)
(install-symbolic-real-number-package)
(install-symbolic-complex-package)
(install-symbolic-polynomial-sparse-package)
(load "2.complex-rectangular.scm")
(load "2.complex-polar.scm")
(install-complex-rectangular-package)
(install-complex-polar-package)
(load "2.79.symbolic-equ?.scm")
(load "2.80.symbolic-=zero?.scm")
(load "2.83.symbolic-raise.scm")
(load "2.85.symbolic-project.scm")
(load "2.85.symbolic-no-drop.scm")
(install-symbolic-equ?-package)
(install-symbolic-=zero?-package)
(install-symbolic-raise-package)
(install-symbolic-project-package)
(install-symbolic-no-drop-package)
;; Install package
(load "2.87.polynomial-=zero?.scm")
(install-polynomial-=zero?-package)
;; Test
(define x0 (make-polynomial 'x '()))
(define x1 (make-polynomial 'x '((2 1))))
(define x2 (make-polynomial 'x '((4 1))))
(define x3 (make-polynomial 'x (list (list 4 1)
                                     (list 2 (make-polynomial 'y '(3 1))))))
(define x4 (make-polynomial 'x (list (list 4 1)
                                     (list 3 (make-polynomial 'y '())))))
(test (=zero? x0) true)
(test (=zero? x1) false)
(test (add x1 x2) (make-polynomial 'x '((4 1) (2 1))))
(test (add x2 x3) '(polynomial x (4 2) (2 (polynomial y 3 1))))
(test (add x1 x4) (make-polynomial 'x '((4 1) (2 1))))
