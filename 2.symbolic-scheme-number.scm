(define (install-symbolic-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
       (lambda (x y) (tag (/ x y))))
  (put 'make 'scheme-number
       (lambda (x) (tag (exact x))))
  'done)
;; Cons
(define (make-scheme-number n)
  ((get 'make 'scheme-number) n))
;; Pred
(define (scheme-number? n)
  (equal? (type-tag n) 'scheme-number))
