(load "0.efma.scm")
(load "3.bst-set.scm")
(define paul (lambda (amount) (+ amount 10)))
(define peter (lambda (amount) (- amount 20)))
(define mary (lambda (amount) (- amount (/ amount 2.))))
(define users (list paul peter mary))
(define final-vals (bst-set))
(map (lambda (x) (adjoin-set x final-vals))
     (map (lambda (l)
            (let ((x (list-ref l 0))
                  (y (list-ref l 1))
                  (z (list-ref l 2)))
              (x (y (z 100)))))
          (permutations users)))
(print-set final-vals)
