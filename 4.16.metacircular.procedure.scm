(load "4.metacircular.procedure.scm")

(define (scan-out-defines proc-body)
  (define (definition? exp) (tagged-list? exp 'define))
  (define (defs processed) (car processed))
  (define (body processed) (cdr processed))
  (let ((processed (fold (lambda (x acc)
                           (if (definition? x)
                             (cons (cons x (car acc))
                                   (cdr acc))
                             (cons (car acc)
                                   (cons x (cdr acc)))))
                         (cons '() '())
                         proc-body)))
    (let ((let-defs (map unassign (defs processed)))
          (let-body (append (map definition->assignment (defs processed))
                            (body processed))))
      (if (null? (defs processed)) proc-body ; Prevent infinite recursion
        (list (make-let let-defs let-body)))))) ; Make `seq` (cf. `make-begin`)
(define (make-procedure parameters body env)
  (let ((scanned-out (scan-out-defines body)))
    (list 'procedure parameters scanned-out env)))
