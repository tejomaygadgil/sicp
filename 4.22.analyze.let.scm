(define (install-let-package)
  ;; Cons
  (define (make-let defs body)
    (cons 'let (cons defs body)))
  ;; Sel
  (define (let-name exp)
    (if (symbol? (cadr exp))
        (cadr exp)
        false))
  (define (let-defs exp)
    (if (let-name exp)
        (caddr exp)
        (cadr exp)))
  (define (let-body exp)
    (if (let-name exp)
        (cdddr exp)
        (cddr exp)))
  (define (let-args exp)
    (map car (let-defs exp)))
  (define (let-vals exp)
    (map cadr (let-defs exp)))
  ;; Proc
  (define (let->combination exp)
    (if (let-name exp)
        (let ((name (let-name exp))
              (args (let-args exp))
              (vals (let-vals exp))
              (body (let-body exp)))
          (make-begin (cons
                        (make-definition (cons name args) 
                                         (make-begin body))
                        (list (cons name vals)))))
        (cons (make-lambda (let-args exp)
                           (let-body exp))
              (let-vals exp))))
  (define (analyze-let exp)
    (analyze (let->combination exp)))
  ;; Install
  (put 'make 'let make-let)
  (put 'eval 'let analyze-let)
  'ok)
;; Interface
(define (make-let defs body)
  ((get 'make 'let) defs body))
