;;;; 4.11
;; Instead of representing a frame as a pair of lists, we can represent a frame as a list of bindings, where each binding is a name-value pair. Rewrite the environment operations to use this alternative representation.

;;; Answer
;; Env
(define the-empty-environment '())
(define (first-frame env) (car env))
(define (enclosing-environment env) (cdr env))
;; Cons
(define (make-frame variables values)
  (if (null? variables) '()
    (cons (cons (car variables) (car values))
          (make-frame (cdr variables) (cdr values)))))
;; Sel
(define (first-binding frame) (car frame))
(define (rest-bindings frame) (cdr frame))
(define (var-binding binding) (car binding))
(define (val-binding binding) (cdr binding))
;; Proc
(define (add-binding-to-frame! var val frame)
  (set-cdr! frame (cons (cons var val) (cdr frame)))) ;; Idk
(define (set-binding-to-frame! var val frame)
  (set-car! frame (cons var val)))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? var (var-binding (first-binding frame)))
             (val-binding (first-binding frame)))
            (else (scan (rest-bindings frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
          (scan (first-frame env))))
  (env-loop env))
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan frame)
      (cond ((null? frame)
             (env-loop (enclosing-environment env)))
            ((eq? var (var-binding (first-binding frame)))
             (set-binding-to-frame! var val frame))
            (else (scan (rest-bindings frame)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable -- SET!" var)
          (scan (first-frame env))))
  (env-loop env))
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan curr-frame)
      (cond ((null? curr-frame)
             (add-binding-to-frame! var val frame))
            ((eq? var (var-binding (first-binding curr-frame)))
             (set-binding-to-frame! var val curr-frame))
            (else (scan (rest-bindings curr-frame)))))
    (scan frame)))

;; Test
(load "0.util.scm")
(define e1 the-empty-environment)
(define e2 (extend-environment (list 'x 'y) (list 1 2) e1))
(test (lookup-variable-value 'y e2) 2)
(define-variable! 'z 3 e2)
(define-variable! 'y 4 e2)
(test (lookup-variable-value 'z e2) 3)
(test (lookup-variable-value 'y e2) 4)
(define e3 (extend-environment (list 'a 'b) (list 9 8) e2))
(test (lookup-variable-value 'z e3) 3)
(test (lookup-variable-value 'y e3) 4)
(define-variable! 'z 7 e3)
(test (lookup-variable-value 'z e3) 7)
(test e3 '(((a . 9) (z . 7) (b . 8)) ((x . 1) (z . 3) (y . 4))))
