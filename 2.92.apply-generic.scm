(define (apply-generic op . args)
  (define (no-drop? op) (get 'no-drop op))
  (define (raise-to-polynomial p x) ; (*) Polynomial raise logic
    (include "2.term.scm")
    (include "2.polynomial-abstraction.scm")
    (make-polynomial-from-sparse (variable p)
                                 (list (make-term 0 x))))
  (define (raise-to source target)
    (let ((target-type (type-tag target)))
      (if (equal? target-type 'polynomial) ; (*) Raise polynomial
        (raise-to-polynomial (contents target) source)
        (let iter ((source source))
          (let ((raised (raise source)))
            (if (or (not-found? target-type)
                    (not-found? raised)) false
              (let ((raised-type (type-tag raised)))
                (cond ((equal? raised-type target-type) raised)
                      (raised (iter raised))))))))))
  (define (drop arg)
    (let ((projected (project arg)))
      (if (and (not (not-found? projected))
               (equ? arg (if (polynomial? arg) ; (*) Drop polynomial
                           (raise-to-polynomial (contents arg) projected)
                           (raise projected))))
        (drop projected)
        arg)))
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
        (let ((result (apply proc (map contents args))))
          (if (no-drop? op) result
            (drop result)))
        (if (= (length args) 2)
          (let ((arg1 (car args))
                (arg2 (cadr args)))
            (if (equal? (type-tag arg1)
                        (type-tag arg2))
              (error "Missing same-type op -- APPLY-GENERIC" op args)
              (let ((raise1 (raise-to arg1 arg2)))
                (if raise1 (apply-generic op raise1 arg2)
                  (let ((raise2 (raise-to arg2 arg1)))
                    (if raise2 (apply-generic op arg1 raise2)
                      'not-found))))))
          'not-found)))))
